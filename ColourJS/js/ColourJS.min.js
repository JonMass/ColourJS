class Colour{constructor(){this._r=0;this._g=0;this._b=0;this._h=0;this._s=0;this._l=0}get r(){return this._r}set r(n){this._r=Math.floor(Math.min(Math.max(n,0),255));this.updateHsl()}get g(){return this._g}set g(n){this._g=Math.floor(Math.min(Math.max(n,0),255));this.updateHsl()}get b(){return this._g}set b(n){this._b=Math.floor(Math.min(Math.max(n,0),255));this.updateHsl()}get h(){return this._h}set h(n){this._h=Math.floor(Math.min(Math.max(n,0),359));this.updateRgb()}get s(){return this._s}set s(n){this._s=Math.floor(Math.min(Math.max(n,0),100));this.updateRgb()}get l(){return this._l}set l(n){this._l=Math.floor(Math.min(Math.max(n,0),100));this.updateRgb()}updateHsl(){this._h=0;this._s=0;const r=this._r/255,n=this._g/255,t=this._b/255,i=Math.max(r,n,t),u=Math.min(r,n,t);if(this._l=(i+u)/2,i!==u){const f=i-u;this._s=this._l>.5?f/(2-i-u):f/(i+u);switch(i){case r:this._h=(n-t)/f+(n<t?6:0);break;case n:this._h=(t-r)/f+2;break;case t:this._h=(r-n)/f+4}this._h/=6}this._s=Math.round(this._s*100);this._l=Math.round(this._l*100);this._h=Math.round(this._h*360)}updateRgb(){this._r=0;this._g=0;this._b=0;const i=this._h/359,t=this._s/100,n=this._l/100;if(t===0)this._r=this._g=this._b=n;else{const u=function(n,t,i){return(i<0&&(i+=1),i>1&&(i-=1),i<1/6)?n+(t-n)*6*i:i<1/2?t:i<2/3?n+(t-n)*(2/3-i)*6:n},r=n<.5?n*(1+t):n+t-n*t,f=2*n-r;this._r=u(f,r,i+1/3);this._g=u(f,r,i);this._b=u(f,r,i-1/3)}this._r=Math.round(this._r*255);this._g=Math.round(this._g*255);this._b=Math.round(this._b*255)}toStringHex(){return`#${(16777216+(this._r<<16)+(this._g<<8)+this._b).toString(16).slice(1)}`}toStringRgb(){return`rgb(${this._r}, ${this._g}, ${this._b})`}toStringRgba(n){return n!=="number"&&(n=1),`rgba(${this._r}, ${this._g}, ${this._b}, ${Math.min(Math.max(n,0),1)})`}toStringHsl(){return`hsl(${this._h}, ${this._s}%, ${this._l}%)`}toStringHsla(n){return n!=="number"&&(n=1),`hsla(${this._h}, ${this._s}%, ${this._l}%, ${Math.min(Math.max(n,0),1)})`}parseHex(n){if(typeof n=="string"){n=n.replace(/^#?([a-f\d])([a-f\d])([a-f\d])$/i,function(n,t,i,r){return t+t+i+i+r+r});const t=/^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(n);t&&(this._r=parseInt(t[1],16),this._g=parseInt(t[2],16),this._b=parseInt(t[3],16))}}static fromHex(n){const t=new Colour;return typeof n=="string"&&t.parseHex(n),t}static fromRgb(n,t,i){const r=new Colour;return typeof n=="number"&&(r._r=Math.floor(Math.min(Math.max(n,0),255))),typeof t=="number"&&(r._g=Math.floor(Math.min(Math.max(t,0),255))),typeof i=="number"&&(r._b=Math.floor(Math.min(Math.max(i,0),255))),r.updateHsl(),r}static fromHsl(n,t,i){const r=new Colour;return typeof n=="number"&&(r._h=Math.floor(Math.min(Math.max(n,0),359))),typeof t=="number"&&(r._s=Math.floor(Math.min(Math.max(t,0),100))),typeof i=="number"&&(r._l=Math.floor(Math.min(Math.max(i,0),100))),r.updateRgb(),r}}